/* eslint-disable @typescript-eslint/naming-convention */
export interface PaginatedCursorResponse {
    pagination: { cursor?: string };
}
export interface PaginatedFlatResponse {
    pagination: string;
}
export interface DataObjectResponse<T> {
    data: T;
}
export interface DataListResponse<T> {
    data: T[];
}
interface EventSubBroadcasterCondition {
    /**
     * The broadcaster user ID for the channel you want to get events for.
     */
    broadcaster_user_id: string;
}
interface EventSubRaidCondition {
    /**
     * The broadcaster user ID that created the channel raid you want to get notifications for. Use this parameter if you want to know when a specific broadcaster raids another broadcaster. The channel raid condition must include either `from_broadcaster_user_id` or `to_broadcaster_user_id`.
     */
    from_broadcaster_user_id?: string;
    /**
     * The broadcaster user ID that received the channel raid you want to get notifications for. Use this parameter if you want to know when a specific broadcaster is raided by another broadcaster. The channel raid condition must include either `from_broadcaster_user_id` or `to_broadcaster_user_id`.
     */
    to_broadcaster_user_id?: string;
}
interface EventSubRewardCondition extends EventSubBroadcasterCondition {
    /**
     * Optional. Specify a reward id to only receive notifications for a specific reward.
     */
    reward_id?: string;
}
interface EventSubDropEntitlementGrantCondition {
    /**
     * The organization ID of the organization that owns the game on the developer portal.
     */
    organization_id: string;
    /**
     * The category (or game) ID of the game for which entitlement notifications will be received.
     */
    category_id?: string;
    /**
     * The campaign ID for a specific campaign for which entitlement notifications will be received.
     */
    campaign_id?: string;
}
interface EventSubExtensionBitsTransactionCreateCondition {
    /**
     * The client ID of the extension.
     */
    extension_client_id: string;
}
interface EventSubUserAuthorizationCondition {
    /**
     * Your applicationâ€™s client id. The provided `client_id` must match the client id in the application access token.
     */
    client_id: string;
}
interface EventSubUserUpdateCondition {
    /**
     * The user ID for the user you want update notifications for.
     */
    user_id: string;
}
type EventSubCondition =
    | EventSubBroadcasterCondition
    | EventSubRaidCondition
    | EventSubRewardCondition
    | EventSubDropEntitlementGrantCondition
    | EventSubExtensionBitsTransactionCreateCondition
    | EventSubUserAuthorizationCondition
    | EventSubUserUpdateCondition;
interface EventSubTransport {
    /**
     * The transport method. Supported values: `webhook`.
     */
    method: "webhook";
    /**
     * The callback URL where the notification should be sent.
     */
    callback: string;
    /**
     * The secret used for verifying a signature.
     */
    secret: string;
}
// All code below is automatically generated
