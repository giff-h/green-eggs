from types import TracebackType
from typing import ClassVar, Match, Optional, Pattern, Type, Union

from aiologger import Logger
import reactivex as rx

from green_eggs import data_types as dt

def ensure_str(val: Union[str, bytes]) -> str: ...
def format_oauth(token: str) -> str: ...
def pattern_match_mapper(pattern: Pattern[str]) -> rx.typing.Mapper[dt.StampedData, Optional[Match[str]]]: ...

class TwitchWebsocketClient:
    host: ClassVar[str]
    def __init__(self, channel: str, username: str, token: str, logger: Logger) -> None: ...
    def __enter__(self) -> TwitchWebsocketClient: ...
    def __exit__(
        self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]
    ) -> None: ...
    async def incoming_data(self) -> rx.Observable[dt.HandleAble]: ...
    async def send(self, data: str, *, redact_log: Optional[str] = ...) -> None: ...
