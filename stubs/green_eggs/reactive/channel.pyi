from logging import Logger
from types import TracebackType
from typing import Callable, Iterator, List, Mapping, Optional, Type

import reactivex as rx
from reactivex import abc as abc

from green_eggs import data_types as dt
from green_eggs.config import Config as Config
from green_eggs.reactive.api import TwitchApiCommon as TwitchApiCommon
from green_eggs.reactive.client import TwitchWebsocketClient as TwitchWebsocketClient
from green_eggs.reactive.operators import filter_is_instance as filter_is_instance

class UsersInChannel:
    def __init__(self) -> None: ...
    def update_from_code353(self, code353: dt.Code353) -> None: ...
    def update_from_joinpart_list(self, joinpart_list: List[dt.JoinPart]) -> None: ...
    def update_from_privmsg(self, privmsg: dt.PrivMsg) -> None: ...

class UserLastMessagesCache(Mapping[dt.NormalizedUser, List[dt.PrivMsg]]):
    def __init__(self, max_privmsg_count: int) -> None: ...
    def __getitem__(self, key: dt.NormalizedUser) -> List[dt.PrivMsg]: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[dt.NormalizedUser]: ...
    def update_from_privmsg(self, privmsg: dt.PrivMsg) -> None: ...

class Channel:
    def __init__(
        self, channel_name: str, api: TwitchApiCommon, chat: TwitchWebsocketClient, config: Config, logger: Logger
    ) -> None: ...
    async def __aenter__(self) -> Channel: ...
    async def __aexit__(
        self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]
    ) -> None: ...
    @property
    def actionable_messages_operator(self) -> Callable[[rx.Observable[dt.HandleAble]], rx.Observable[dt.PrivMsg]]: ...
    def add_permit_for_user(self, user: str) -> bool: ...
    @property
    def broadcaster_id(self) -> str: ...
    @property
    def filter_for_channel(self) -> Callable[[rx.Observable[dt.HandleAble]], rx.Observable[dt.HandleAble]]: ...
    async def send_message(self, message: str) -> None: ...
