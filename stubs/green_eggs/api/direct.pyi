from types import TracebackType
from typing import Any, Dict, List, Mapping, Optional, Sequence, Tuple, Type, Union

from aiologger import Logger

UrlParams = Union[
    Mapping[Any, Any], Mapping[Any, Sequence[Any]], Sequence[Tuple[Any, Any]], Sequence[Tuple[Any, Sequence[Any]]]
]

class TwitchApiDirect:
    def __init__(self, client_id: str, token: str, logger: Logger) -> None: ...
    async def __aenter__(self) -> TwitchApiDirect: ...
    async def __aexit__(
        self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]
    ): ...
    async def start_commercial(self, broadcaster_id: str, length: int): ...
    async def get_extension_analytics(
        self,
        *,
        after: str = ...,
        ended_at: str = ...,
        extension_id: str = ...,
        first: int = ...,
        started_at: str = ...,
        type_: str = ...,
    ): ...
    async def get_game_analytics(
        self,
        *,
        after: str = ...,
        ended_at: str = ...,
        first: int = ...,
        game_id: str = ...,
        started_at: str = ...,
        type_: str = ...,
    ): ...
    async def get_bits_leaderboard(
        self, *, count: int = ..., period: str = ..., started_at: str = ..., user_id: str = ...
    ): ...
    async def get_cheermotes(self, *, broadcaster_id: str = ...): ...
    async def get_extension_transactions(
        self, *, after: str = ..., extension_id: str, first: int = ..., id_: Union[str, List[str]] = ...
    ): ...
    async def get_channel_information(self, broadcaster_id: str): ...
    async def modify_channel_information(
        self,
        broadcaster_id: str,
        *,
        broadcaster_language: str = ...,
        delay: int = ...,
        game_id: str = ...,
        title: str = ...,
    ): ...
    async def get_channel_editors(self, broadcaster_id: str): ...
    async def create_custom_rewards(
        self,
        broadcaster_id: str,
        *,
        background_color: str = ...,
        cost: int,
        global_cooldown_seconds: int = ...,
        is_enabled: bool = ...,
        is_global_cooldown_enabled: bool = ...,
        is_max_per_stream_enabled: bool = ...,
        is_max_per_user_per_stream_enabled: bool = ...,
        is_user_input_required: bool = ...,
        max_per_stream: int = ...,
        max_per_user_per_stream: int = ...,
        prompt: str = ...,
        should_redemptions_skip_request_queue: bool = ...,
        title: str,
    ): ...
    async def delete_custom_reward(self, broadcaster_id: str, id_: str): ...
    async def get_custom_reward(
        self, broadcaster_id: str, *, id_: Union[str, List[str]] = ..., only_manageable_rewards: bool = ...
    ): ...
    async def get_custom_reward_redemption(
        self,
        *,
        after: str = ...,
        broadcaster_id: str,
        first: int = ...,
        id_: Union[str, List[str]] = ...,
        reward_id: str,
        sort: str = ...,
        status: str = ...,
    ): ...
    async def update_custom_reward(
        self,
        broadcaster_id: str,
        id_: str,
        *,
        background_color: str = ...,
        cost: int = ...,
        global_cooldown_seconds: int = ...,
        is_enabled: bool = ...,
        is_global_cooldown_enabled: bool = ...,
        is_max_per_stream_enabled: bool = ...,
        is_max_per_user_per_stream_enabled: bool = ...,
        is_paused: bool = ...,
        is_user_input_required: bool = ...,
        max_per_stream: int = ...,
        max_per_user_per_stream: int = ...,
        prompt: str = ...,
        should_redemptions_skip_request_queue: bool = ...,
        title: str = ...,
    ): ...
    async def update_redemption_status(
        self, broadcaster_id: str, id_: Union[str, List[str]], reward_id: str, status: str
    ): ...
    async def get_channel_emotes(self, broadcaster_id: str): ...
    async def get_global_emotes(self): ...
    async def get_emote_sets(self, emote_set_id: str): ...
    async def get_channel_chat_badges(self, broadcaster_id: str): ...
    async def get_global_chat_badges(self): ...
    async def get_chat_settings(self, broadcaster_id: str, *, moderator_id: str = ...): ...
    async def update_chat_settings(
        self,
        broadcaster_id: str,
        moderator_id: str,
        *,
        emote_mode: bool = ...,
        follower_mode: bool = ...,
        follower_mode_duration: int = ...,
        non_moderator_chat_delay: bool = ...,
        non_moderator_chat_delay_duration: int = ...,
        slow_mode: bool = ...,
        slow_mode_wait_time: int = ...,
        subscriber_mode: bool = ...,
        unique_chat_mode: bool = ...,
    ): ...
    async def create_clip(self, broadcaster_id: str, *, has_delay: bool = ...): ...
    async def get_clips(
        self,
        *,
        after: str = ...,
        before: str = ...,
        broadcaster_id: str,
        ended_at: str = ...,
        first: int = ...,
        game_id: str,
        id_: Union[str, List[str]],
        started_at: str = ...,
    ): ...
    async def get_code_status(self): ...
    async def get_drops_entitlements(
        self,
        *,
        after: str = ...,
        first: int = ...,
        fulfillment_status: str = ...,
        game_id: str = ...,
        id_: str = ...,
        user_id: str = ...,
    ): ...
    async def update_drops_entitlements(self, *, entitlement_ids: List[str] = ..., fulfillment_status: str = ...): ...
    async def redeem_code(self, *, code: str = ..., user_id: int = ...): ...
    async def get_extension_configuration_segment(self, broadcaster_id: str, extension_id: str, segment: str): ...
    async def set_extension_configuration_segment(
        self, *, broadcaster_id: str = ..., content: str = ..., extension_id: str, segment: str, version: str = ...
    ): ...
    async def set_extension_required_configuration(
        self, broadcaster_id: str, configuration_version: str, extension_id: str, extension_version: str
    ): ...
    async def send_extension_pubsub_message(
        self, broadcaster_id: str, is_global_broadcast: bool, message: str, target: List[str]
    ): ...
    async def get_extension_live_channels(self, *, after: str = ..., extension_id: str, first: int = ...): ...
    async def get_extension_secrets(self): ...
    async def create_extension_secret(self, *, delay: int = ...): ...
    async def send_extension_chat_message(
        self, broadcaster_id: str, extension_id: str, extension_version: str, text: str
    ): ...
    async def get_extensions(self, extension_id: str, *, extension_version: str = ...): ...
    async def get_released_extensions(self, extension_id: str, *, extension_version: str = ...): ...
    async def get_extension_bits_products(self, *, should_include_all: bool = ...): ...
    async def update_extension_bits_product(
        self,
        cost_amount: int,
        cost_type: str,
        display_name: str,
        *,
        expiration: str = ...,
        in_development: bool = ...,
        is_broadcast: bool = ...,
        sku: str,
    ): ...
    async def create_eventsub_subscription(
        self, condition: Dict[str, Any], transport: Dict[str, Any], type_: str, version: str
    ): ...
    async def delete_eventsub_subscription(self, id_: str): ...
    async def get_eventsub_subscriptions(self, *, after: str = ..., status: str = ..., type_: str = ...): ...
    async def get_top_games(self, *, after: str = ..., before: str = ..., first: int = ...): ...
    async def get_games(self, id_: str, name: str): ...
    async def get_creator_goals(self, broadcaster_id: str): ...
    async def get_hype_train_events(
        self, broadcaster_id: str, *, cursor: str = ..., first: int = ..., id_: str = ...
    ): ...
    async def check_automod_status(self, broadcaster_id: str, msg_id: str, msg_text: str, user_id: str): ...
    async def manage_held_automod_messages(self, action: str, msg_id: str, user_id: str): ...
    async def get_automod_settings(self, broadcaster_id: str, moderator_id: str): ...
    async def update_automod_settings(
        self,
        broadcaster_id: str,
        moderator_id: str,
        *,
        aggression: int = ...,
        bullying: int = ...,
        disability: int = ...,
        misogyny: int = ...,
        overall_level: int = ...,
        race_ethnicity_or_religion: int = ...,
        sex_based_terms: int = ...,
        sexuality_sex_or_gender: int = ...,
        swearing: int = ...,
    ): ...
    async def get_banned_events(
        self, *, after: str = ..., broadcaster_id: str, first: str = ..., user_id: Union[str, List[str]] = ...
    ): ...
    async def get_banned_users(
        self,
        *,
        after: str = ...,
        before: str = ...,
        broadcaster_id: str,
        first: str = ...,
        user_id: Union[str, List[str]] = ...,
    ): ...
    async def ban_user(
        self, broadcaster_id: str, moderator_id: str, *, duration: int = ..., reason: str, user_id: str
    ): ...
    async def unban_user(self, broadcaster_id: str, moderator_id: str, user_id: str): ...
    async def get_blocked_terms(
        self, *, after: str = ..., broadcaster_id: str, first: int = ..., moderator_id: str
    ): ...
    async def add_blocked_term(self, broadcaster_id: str, moderator_id: str, text: str): ...
    async def remove_blocked_term(self, broadcaster_id: str, id_: str, moderator_id: str): ...
    async def get_moderators(
        self, *, after: str = ..., broadcaster_id: str, first: str = ..., user_id: Union[str, List[str]] = ...
    ): ...
    async def get_moderator_events(
        self, *, after: str = ..., broadcaster_id: str, first: str = ..., user_id: Union[str, List[str]] = ...
    ): ...
    async def get_polls(
        self, *, after: str = ..., broadcaster_id: str, first: str = ..., id_: Union[str, List[str]] = ...
    ): ...
    async def create_poll(
        self,
        *,
        bits_per_vote: int = ...,
        bits_voting_enabled: bool = ...,
        broadcaster_id: str,
        channel_points_per_vote: int = ...,
        channel_points_voting_enabled: bool = ...,
        choice_title: List[str],
        duration: int,
        title: str,
    ): ...
    async def end_poll(self, broadcaster_id: str, id_: str, status: str): ...
    async def get_predictions(
        self, *, after: str = ..., broadcaster_id: str, first: str = ..., id_: Union[str, List[str]] = ...
    ): ...
    async def create_prediction(
        self, broadcaster_id: str, outcome_title: List[str], prediction_window: int, title: str
    ): ...
    async def end_prediction(self, broadcaster_id: str, id_: str, status: str, *, winning_outcome_id: str = ...): ...
    async def get_channel_stream_schedule(
        self,
        *,
        after: str = ...,
        broadcaster_id: str,
        first: int = ...,
        id_: Union[str, List[str]] = ...,
        start_time: str = ...,
        utc_offset: str = ...,
    ): ...
    async def get_channel_icalendar(self, broadcaster_id: str): ...
    async def update_channel_stream_schedule(
        self,
        broadcaster_id: str,
        *,
        is_vacation_enabled: bool = ...,
        timezone: str = ...,
        vacation_end_time: str = ...,
        vacation_start_time: str = ...,
    ): ...
    async def create_channel_stream_schedule_segment(
        self,
        broadcaster_id: str,
        *,
        category_id: str = ...,
        duration: str = ...,
        is_recurring: bool,
        start_time: str,
        timezone: str,
        title: str = ...,
    ): ...
    async def update_channel_stream_schedule_segment(
        self,
        broadcaster_id: str,
        id_: str,
        *,
        category_id: str = ...,
        duration: str = ...,
        is_canceled: bool = ...,
        start_time: str = ...,
        timezone: str = ...,
        title: str = ...,
    ): ...
    async def delete_channel_stream_schedule_segment(self, broadcaster_id: str, id_: str): ...
    async def search_categories(self, *, after: str = ..., first: int = ..., query: str): ...
    async def search_channels(self, *, after: str = ..., first: int = ..., live_only: bool = ..., query: str): ...
    async def get_soundtrack_current_track(self, broadcaster_id: str): ...
    async def get_soundtrack_playlist(self, id_: str): ...
    async def get_soundtrack_playlists(self): ...
    async def get_stream_key(self, broadcaster_id: str): ...
    async def get_streams(
        self,
        *,
        after: str = ...,
        before: str = ...,
        first: int = ...,
        game_id: str = ...,
        language: str = ...,
        user_id: str = ...,
        user_login: str = ...,
    ): ...
    async def get_followed_streams(self, *, after: str = ..., first: int = ..., user_id: str): ...
    async def create_stream_marker(self, *, description: str = ..., user_id: str): ...
    async def get_stream_markers(
        self, *, after: str = ..., before: str = ..., first: str = ..., user_id: str, video_id: str
    ): ...
    async def get_broadcaster_subscriptions(
        self, *, after: str = ..., broadcaster_id: str, first: str = ..., user_id: str = ...
    ): ...
    async def check_user_subscription(self, broadcaster_id: str, user_id: str): ...
    async def get_all_stream_tags(self, *, after: str = ..., first: int = ..., tag_id: str = ...): ...
    async def get_stream_tags(self, broadcaster_id: str): ...
    async def replace_stream_tags(self, broadcaster_id: str, *, tag_ids: List[str] = ...): ...
    async def get_channel_teams(self, broadcaster_id: str): ...
    async def get_teams(self, *, id_: str = ..., name: str = ...): ...
    async def get_users(self, *, id_: Union[str, List[str]] = ..., login: Union[str, List[str]] = ...): ...
    async def update_user(self, *, description: str = ...): ...
    async def get_users_follows(self, *, after: str = ..., first: int = ..., from_id: str = ..., to_id: str = ...): ...
    async def get_user_block_list(self, *, after: str = ..., broadcaster_id: str, first: int = ...): ...
    async def block_user(self, *, reason: str = ..., source_context: str = ..., target_user_id: str): ...
    async def unblock_user(self, target_user_id: str): ...
    async def get_user_extensions(self): ...
    async def get_user_active_extensions(self, *, user_id: str = ...): ...
    async def update_user_extensions(self): ...
    async def get_videos(
        self,
        *,
        after: str = ...,
        before: str = ...,
        first: str = ...,
        game_id: str,
        id_: Union[str, List[str]],
        language: str = ...,
        period: str = ...,
        sort: str = ...,
        type_: str = ...,
        user_id: str,
    ): ...
    async def delete_videos(self, id_: Union[str, List[str]]): ...
