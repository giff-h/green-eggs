from logging import Logger
from typing import Optional

from green_eggs.api import TwitchApiCommon as TwitchApiCommon
from green_eggs.client import TwitchChatClient as TwitchChatClient
from green_eggs.config import Config as Config
from green_eggs.config import LinkAllowUserConditions as LinkAllowUserConditions
from green_eggs.config import LinkPurgeActions as LinkPurgeActions
from green_eggs.constants import URL_PATTERN as URL_PATTERN
from green_eggs.data_types import Code353 as Code353
from green_eggs.data_types import JoinPart as JoinPart
from green_eggs.data_types import PrivMsg as PrivMsg
from green_eggs.data_types import RoomState as RoomState

class Channel:
    def __init__(self, login: str, api: TwitchApiCommon, chat: TwitchChatClient, config: Config, logger: Logger): ...
    def add_permit_for_user(self, username: str) -> bool: ...
    @property
    def broadcaster_id(self) -> str: ...
    async def check_for_links(self, message: PrivMsg) -> bool: ...
    def handle_code_353(self, code353: Code353): ...
    def handle_join_part(self, join_part: JoinPart): ...
    def handle_message(self, message: PrivMsg): ...
    def handle_room_state(self, room_state: RoomState): ...
    def is_user_in_channel(self, user_login: str) -> bool: ...
    async def is_user_moderator(self, user_id: str) -> bool: ...
    async def is_user_subscribed(self, user_id: str) -> bool: ...
    def is_user_vip(self, user_id: str) -> bool: ...
    def user_latest_message(self, user: str) -> Optional[PrivMsg]: ...
    async def send(self, message: str): ...
