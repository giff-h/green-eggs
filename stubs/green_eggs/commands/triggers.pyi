import abc
from collections.abc import Hashable
from typing import Any, AsyncGenerator

from green_eggs.channel import Channel as Channel
from green_eggs.data_types import PrivMsg as PrivMsg

async def async_all(async_generator: AsyncGenerator[Any, None]) -> bool: ...
async def async_any(async_generator: AsyncGenerator[Any, None]) -> bool: ...

class CommandTrigger(Hashable, abc.ABC, metaclass=abc.ABCMeta):
    def __and__(self, other: CommandTrigger) -> AndTrigger: ...
    def __eq__(self, other) -> bool: ...
    def __or__(self, other: CommandTrigger) -> OrTrigger: ...
    @abc.abstractmethod
    async def check(self, message: PrivMsg, channel: Channel) -> bool: ...

class LogicTrigger(CommandTrigger, abc.ABC, metaclass=abc.ABCMeta):
    def __init__(self, *triggers: CommandTrigger) -> None: ...
    def __hash__(self) -> int: ...

class AndTrigger(LogicTrigger):
    async def check(self, message: PrivMsg, channel: Channel) -> bool: ...

class OrTrigger(LogicTrigger):
    async def check(self, message: PrivMsg, channel: Channel) -> bool: ...

class FirstWordTrigger(CommandTrigger):
    def __init__(self, value: str, case_sensitive: bool = ...) -> None: ...
    def __hash__(self) -> int: ...
    async def check(self, message: PrivMsg, channel: Channel) -> bool: ...

class SenderIsModTrigger(CommandTrigger):
    def __hash__(self) -> int: ...
    async def check(self, message: PrivMsg, channel: Channel) -> bool: ...

class SenderIsSubscribedTrigger(CommandTrigger):
    def __hash__(self) -> int: ...
    async def check(self, message: PrivMsg, channel: Channel) -> bool: ...
